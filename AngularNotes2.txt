------------------
Angular 6 Notes
------------------
Source: https://www.techiediaries.com/angular-tutorial/
Have Node.js installed which installs Node js and the NPM tool, node --version, npm --version
npm -g install @angular/cli
ng version
ng new projectname
Navigate to the projectname folder and run "ng serve", starts the application on default port of 4200
A component is a TypeScript class with an HTML template and an optional set of CSS styles that control a part of the screen.
An Angular 6 application is basically a tree of components with a root component (the famous AppComponent).
The root component is the one contained in the bootstrap array in the main NgModule module app.module.ts
One important aspect of components is re-usability. A component can be re-used throughout the application and even in other applications. 
Common and repeatable code that performs a certain task can be encapsulated into a re-usable component that can be called whenever we need the functionality 
it provides.
An Angular application is made of several components forming a tree structure with parent and child components.
A component is an independent block of a big system (web application) that communicates with the other building blocks (components) of the system using inputs 
and outputs. 
A component has associated view, data and behavior and may have parent and child components.
Components allow maximum re-usability, easy testing, maintenance and separation of concerns.
Head over to your Angular application project folder and open the src/app folder. You will find the following files:
---------------------------------------------
app.component.css: the CSS file for the component
app.component.html: the HTML view for the component
app.component.spec.ts: the unit tests or spec file for the component
app.component.ts: the component code (data and behavior)
app.module.ts: the application main module
Except for the last file which contains the declaration of the application main (root) Module, all these files are used to create a component. 
It's the AppComponent: The root component of our application. All other components we are going to create next will be direct or un-direct children of the root component.
Explanation of src/app/app.component.ts:
---------------------------------------------
We first import the Component decorator from @angular/core then we use it to decorate the TypeScript class AppComponent. 
The Component decorator takes an object with many parameters such as:
selector: specifies the tag that can be used to call this component in HTML templates just like the standard HTML tags
templateUrl: indicates the path of the HTML template that will be used to display this component (you can also use the template parameter to include the 
template inline as a string)
styleUrls: specifies an array of URLs for CSS style-sheets for the component
The export keyword is used to export the component so that it can be imported from other components and modules in the application.
The title variable is a member variable that holds the string 'app'. There is nothing special about this variable and it's not a part of the 
canonical definition of an Angular component.
Explanation of src/app/app.component.html:
---------------------------------------------
The template is a normal HTML file (almost all HTML tags are valid to be used inside Angular templates except for some tags such as 
<script>, <html> and <body> etc.) with the exception that it can contain template variables (in this case the title variable) or 
expressions ({{...}}) that can be used to insert values in the DOM dynamically. This is called interpolation or data binding.
You can also use other components directly inside Angular templates (via the selector property) just like normal HTML.
If you are familiar with the MVC (Model View Controller) pattern, the component class plays the role of the Controller and 
the HTML template plays the role of the View.
----------------------------------------------
Angular CLI to create the components
ng generate component COMPONENTNAME
the command generates all the files to define a component and also updates src/app/app.module.ts
omponents are automatically added to the AppModule declarations array
If you are creating components manually, you need to make sure to include manually so they can be recognized as part of the module.
-----------------------------------------------
Adding Angular Routing
Angular CLI provides the --routing switch (ng new crmapp --routing) that enables you to add routing automatically but we're going to add routing manually 
for the sake of understanding the various pieces involved in adding component routing to your Angular application.
1. add a separate module (which can be called AppRoutingModule) in a file app-routing.module.ts
1.1 Import the Routes and RouterModule in the app-routing.module.ts and create a const array object of routes of type Routes.
1.2 Configure the routes to specific components.
2. import the module in AppModule and add it to the imports of main AppModule
3. Add <router-outlet></router-outlet> in app.component.html (this is where the Angular Router will insert components matching the current path)
4. add routes (each route is an object with properties such as path and component etc.).

This is the initial content of AppRoutingModule.module.ts
------------------------------------------------------------
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
--------------------------------------------------------------
The routes will contain all the routes of the application. After creating the components we'll add routes to this array.
redirect the visitor to the /accounts path when the home URL is visited so the first path we'll add is:
{ 
    path:  '', 
    redirectTo:  'accounts', 
    pathMatch:  'full' 
},
{
    path:  'accounts',
    component:  AccountListComponent
},
{
    path:  'create-account',
    component:  AccountCreateComponent
},
{
    path:  'contacts',
    component:  ContactListComponent
}
The pathMatch specifies the matching strategy. full means that we want to fully match the path.
----------------------------------------------------------------------------------
src/app/app.module.ts and import the routing module then add it to the imports array:

import {AppRoutingModule} from  './app-routing.module';
[...]

@NgModule({

declarations: [

AppComponent,
[...]
],

imports: [
    BrowserModule,
    AppRoutingModule
],
[...]
})
export  class  AppModule { }
-----------------------------------------------------------------------------------------
Finally, open src/app/app.component.html then add the navigation links and the router outlet:

<a [routerLink]="'/accounts'"> Accounts </a>
<a [routerLink]="'/create-account'"> Create Account </a>

<a [routerLink]="'/contacts'"> Contacts </a>
<a [routerLink]="'/create-contact'"> Create Contact </a>

<a [routerLink]="'/leads'"> Leads </a>
<a [routerLink]="'/create-lead'"> Create Lead </a>

<a [routerLink]="'/opportunities'"> Opportunities </a>
<a [routerLink]="'/create-opportunity'"> Create Opportunity </a>

<div>
    <router-outlet></router-outlet>
</div>
----------------------------------------------------------------------------------------------
Consuming the REST API Using Angular 6 HttpClient
1. add the HttpClientModule module to the imports array of the main application module
----------------------------------------------------------------------------------------------
Create an Angular 6 Service/Provider
A service is a global class that can be injected in any component. It's used to encapsulate code that can be common between multiple components in one place 
instead of repeating it throughout various components.
Now, lets create a service that encapsulates all the code needed for interacting with the REST API. Using Angulat CLI run the following command
ng service api
Two files: src/app/api.service.ts and src/app/api.service.spec.ts will be generated. The first contains code for the service and the second contains tests.
Open src/app/api.service.ts then import and inject the HttpClient class.
import { Injectable } from  '@angular/core';
import { HttpClient} from  '@angular/common/http';
@Injectable({
providedIn:  'root'
})
export  class  APIService {
    //auto injection by Angular, and the variable httpClient even if not declared outside can be used anywhere in the class/service.
    constructor(private  httpClient:  HttpClient) {}
}
Angular 6 provides a way to register services/providers directly in the @Injectable() decorator by using the new providedIn attribute. 
This attribute accepts any module of your application or 'root' for the main app module. Now you don't have to include your service in the providers array of your module.
-----------------------------------------------------------------------------------------------------
Getting Contacts/Sending HTTP GET Request
Open src/app/api.service.ts and add the following method:
export  class  APIService {
API_URL  =  'http://localhost:8000';
constructor(private  httpClient:  HttpClient) {}
getContacts(){
    return  this.httpClient.get(`${this.API_URL}/contacts`);
}
---------------------------------------------------------------------------------------------------------
Next, open src/app/contact-list/contact-list.component.ts and inject the APIService then call the getContacts() method:
import { Component, OnInit } from  '@angular/core';
import { APIService } from  '../api.service';

@Component({
    selector:  'app-contact-list',
    templateUrl:  './contact-list.component.html',
    styleUrls: ['./contact-list.component.css']
})

export  class  ContactListComponent  implements  OnInit {

private  contacts:  Array<object> = [];
//apiService is auto injected and we can use this anywhere in the class
constructor(private  apiService:  APIService) { }
ngOnInit() {
    this.getContacts();
}
public  getContacts(){
    this.apiService.getContacts().subscribe((data:  Array<object>) => {
        this.contacts  =  data;
        console.log(data);
    });
}
}
--------------------------------------------------------------------------------
Open src/app/contact-list/contact-list.component.html and add the following code
<h1>
My Contacts
</h1>
<div>
<table  style="width:100%">
<tr>
    <th>First Name</th>
    <th>Last Name</th>
    <th>Phone</th>
    <th>Email</th>
    <th>Address</th>
</tr>
<tr *ngFor="let contact of contacts">
    <td>  </td>
    <td>  </td>
    <td>  </td>
    <td>  </td>
    <td>  </td>
</tr>
</table>
</div>
--------------------------------------------------------------------------------
Creating Contacts/Sending HTTP POST Request
Now let's create a method to send HTTP Post request to create a random contact. Open the API service file and add the following method:
createContact(contact){
    return  this.httpClient.post(`${this.API_URL}/contacts/`,contact);
}
-------------------------------------------------------------------------------
Next let's call this method from the ContactCreateComponent to create a contact. First open src/app/contact-create/contact-create.component.ts and add the following code:
import { Component, OnInit } from  '@angular/core';
import { APIService } from  '../api.service';

@Component({
selector:  'app-contact-create',
templateUrl:  './contact-create.component.html',
styleUrls: ['./contact-create.component.css']
})

export  class  ContactCreateComponent  implements  OnInit {
constructor(private  apiService:  APIService) { }

ngOnInit() {}

createContact(){

var  contact  = {
    account:  1,
    address:  "Home N 333 Apartment 300",
    createdBy:  1,
    description:  "This is the third contact",
    email:  "abbess@email.com",
    first_name:  "kaya",
    isActive: true,
    last_name: "Abbes",
    phone: "00121212101"
};
this.apiService.createContact(contact).subscribe((response) => {
    console.log(response);
});
};
}
}
For now, we're simply hard-coding the contact info for the sake of simplicity.
-------------------------------------------------------------------------------
Next open src/app/contact-create/contact-create.component.html and add a button to call the method to create a contact:
<h1>
Create Contact
</h1>
<button (click)="createContact()">
    Create Contact
</button>
-------------------------------------------------------------------------------
